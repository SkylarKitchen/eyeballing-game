{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/constants.ts", "../src/utils/helpers.ts", "../src/utils/Stopwatch.ts", "../src/utils/Level.ts", "../src/utils/Score.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const TIME = 30;\n\nexport const PENALTY_DURATION = 5000; //time in ms.\nexport const SHAKE_DURATION = 500; //time in ms.\n\nexport type LEVEL_PROPERTY = {\n  cssProperty: string;\n  min: number;\n  max: number;\n};\n\nexport const LEVEL_PROPERTIES: Record<number, LEVEL_PROPERTY> = {\n  1: {\n    cssProperty: '-webkit-text-stroke-width',\n    min: 1,\n    max: 10,\n  },\n  2: {\n    cssProperty: 'font-variation-settings',\n    min: 25,\n    max: 152,\n  },\n  3: {\n    cssProperty: 'font-variation-settings',\n    min: 100,\n    max: 900,\n  },\n  4: {\n    cssProperty: 'border-radius',\n    min: 0,\n    max: 32,\n  },\n  5: {\n    cssProperty: 'opacity',\n    min: 0,\n    max: 100,\n  },\n  6: {\n    cssProperty: 'box-shadow',\n    min: 0,\n    max: 30,\n  },\n  7: {\n    cssProperty: 'box-shadow',\n    min: 0,\n    max: 360,\n  },\n  8: {\n    cssProperty: 'padding',\n    min: 0,\n    max: 50,\n  },\n};\n\n// export const LEVEL_PROPERTIES: Record<number, string> = {\n//   1: '-webkit-text-stroke-width',\n//   2: 'font-variation-settings',\n//   3: 'font-variation-settings',\n//   4: 'border-radius',\n//   5: 'opacity',\n//   6: 'box-shadow',\n//   7: 'box-shadow',\n// };\n\nexport const PERFECT_PERCENT = 4;\nexport const GOOD_PERCENT = 20;\n\nexport const POINTS_FOR_PERFECT = 2;\nexport const POINTS_FOR_GOOD = 1;\n\nexport const COLORS = {\n  SUCCESS: '#37D200',\n  ERROR: '#E50404',\n  BRAND_PURPLE: '#6c39ff',\n};\n\nexport const CLASSNAMES = {\n  SUCCESS: 'is-success',\n  ERROR: 'is-error',\n  ACTIVE: 'is-active',\n  SHAKE: 'shake-element',\n};\n", "export function convertDegreeToBoxShadowOffset(angleInDegree: number, distance: number) {\n  angleInDegree -= 90;\n\n  // Ensure angleInDegree is within 0-360 degree range\n  if (angleInDegree < 0) {\n    angleInDegree += 360;\n  }\n  // Convert angle from degrees to radians\n  const angleInRadians = angleInDegree * (Math.PI / 180);\n\n  // Calculate x and y offsets\n  const offsetX = Math.floor(distance * Math.cos(angleInRadians));\n  const offsetY = Math.floor(distance * Math.sin(angleInRadians)); // Negate y offset to match CSS conventions\n\n  return { offsetX, offsetY };\n}\n\nexport function formatTime(time: number): string {\n  const minutes = Math.floor(time / 60);\n  const seconds = (time % 60).toFixed(2);\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(5, '0')}`; // format time to MM:SS.SS\n}\n\nexport function formatHumanReadableTime(time: number): string {\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  const minuteStr = minutes === 1 ? 'minute' : 'minutes';\n  const secondStr = seconds === 1 ? 'second' : 'seconds';\n\n  if (minutes === 0) {\n    return `${seconds.toFixed(2)} ${secondStr}`;\n  }\n\n  return `${minutes} ${minuteStr} and ${seconds.toFixed(2)} ${secondStr}`;\n}\n", "import { formatTime } from './helpers';\n\nexport class Stopwatch {\n  private countup = 0; // holds the setInterval\n  private timeElapsed: number; // holds the current elapsed time\n  private eventCallbacks: { [key: string]: Array<() => void> } = {}; // <-- Define an event callbacks object\n\n  constructor(private startTime: number, private timeElement: HTMLElement) {\n    this.timeElapsed = this.startTime;\n    this.timeElement.textContent = formatTime(this.timeElapsed); // update timer display\n  }\n\n  on(eventName: string, callback: () => void) {\n    // <-- Provide method to register callbacks\n    if (!this.eventCallbacks[eventName]) {\n      this.eventCallbacks[eventName] = [];\n    }\n    this.eventCallbacks[eventName].push(callback);\n  }\n\n  private emit(eventName: string) {\n    // <-- Call all registered callbacks when the event happens\n    if (this.eventCallbacks[eventName]) {\n      this.eventCallbacks[eventName].forEach((callback) => callback());\n    }\n  }\n\n  start() {\n    const startTime = performance.now();\n    let previousTime = startTime;\n\n    const update = () => {\n      const currentTime = performance.now();\n      const elapsed = (currentTime - startTime) / 1000; // convert to seconds\n      this.timeElapsed = this.startTime + elapsed;\n\n      if (this.timeElement) {\n        this.timeElement.textContent = formatTime(this.timeElapsed); // update timer display\n      }\n\n      previousTime = currentTime;\n      this.countup = requestAnimationFrame(update);\n    };\n\n    this.countup = requestAnimationFrame(update);\n  }\n\n  stop() {\n    cancelAnimationFrame(this.countup); // stop the countup\n  }\n\n  reset() {\n    this.stop();\n    this.startTime = 0; // reset the initial start time to 0\n    this.timeElapsed = this.startTime; // reset time elapsed to the initial start time\n    this.timeElement.textContent = formatTime(this.timeElapsed); // update timer display\n  }\n\n  getTime(): number {\n    const secondsAccurate = this.timeElapsed + (performance.now() % 1000) / 1000;\n    return Number(secondsAccurate.toFixed(2));\n  }\n\n  getAccurateTime() {\n    const secondsAccurate = this.timeElapsed + (performance.now() % 1000) / 1000;\n    return secondsAccurate.toFixed(2);\n  }\n}\n", "import { PERFECT_PERCENT } from './constants';\nimport { convertDegreeToBoxShadowOffset } from './helpers';\nimport { Score } from './Score';\n\nexport class Level {\n  targetValue: number;\n  userSelection: number;\n  displayUserSelectionElement: HTMLElement;\n  referenceEl: HTMLElement;\n  targetEl: HTMLElement;\n  targetElProperty: string;\n  min: number;\n  max: number;\n  userSelectEl: HTMLInputElement;\n  levelNumber: number;\n  messageEl: HTMLDivElement;\n  score: Score;\n  isCircular: boolean;\n\n  constructor(\n    levelNumber: number,\n    targetValue: number,\n    userSelection: number,\n    displayUserSelectionElement: HTMLElement,\n    referenceEl: HTMLElement,\n    targetElProperty: string,\n    min: number,\n    max: number,\n    targetEl: HTMLElement,\n    userSelectEl: HTMLInputElement,\n    messageEl: HTMLDivElement,\n    score: Score,\n    isCircular = false\n  ) {\n    this.levelNumber = levelNumber;\n    this.targetValue = targetValue;\n    this.userSelection = userSelection;\n    this.displayUserSelectionElement = displayUserSelectionElement;\n    this.referenceEl = referenceEl;\n    this.targetElProperty = targetElProperty;\n    this.min = min;\n    this.max = max;\n    this.targetEl = targetEl;\n    this.userSelectEl = userSelectEl;\n    this.messageEl = messageEl;\n    this.score = score;\n    this.isCircular = isCircular;\n\n    this.updateGameUI();\n  }\n\n  play(): void {\n    this.referenceEl.style.setProperty(\n      this.targetElProperty,\n      this.formatPropertyValueToStringForLevel(this.levelNumber, this.targetValue)\n    );\n\n    this.userSelectEl.addEventListener('input', (e) => {\n      this.userSelection = parseInt((e.target as HTMLInputElement).value);\n      this.updateGameUI();\n    });\n  }\n\n  updateGameUI(): void {\n    // Update the element that displays user selection if it exists\n    if (this.displayUserSelectionElement) {\n      this.displayUserSelectionElement.textContent = `${this.userSelection}`;\n    }\n\n    // Update the target element if it exists\n    if (this.targetEl) {\n      this.targetEl.style.setProperty(\n        this.targetElProperty,\n        this.formatPropertyValueToStringForLevel(this.levelNumber, this.userSelection)\n      );\n    }\n  }\n\n  checkAnswer(): boolean {\n    let difference;\n    let percentageDifference;\n\n    if (this.isCircular) {\n      difference = Math.abs(this.targetValue - this.userSelection);\n      // Adjust difference for angle wrap-around\n      difference = Math.min(difference, 360 - difference);\n\n      // calculate percentage\n      percentageDifference = (difference / 360) * 100;\n    } else {\n      difference = Math.abs(this.targetValue - this.userSelection);\n      // calculate percentage difference based on the range\n      const range = this.max - this.min;\n      percentageDifference = (difference / range) * 100;\n    }\n\n    console.log(`target: ${this.targetValue} user: ${this.userSelection}`);\n    console.log(`difference: ${difference} percentage: ${percentageDifference}`);\n\n    if (percentageDifference <= PERFECT_PERCENT) {\n      return true;\n    }\n\n    return false;\n  }\n  getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  setTargetValue(min: number, max: number) {\n    this.targetValue = this.getRandomInt(min, max);\n  }\n\n  formatPropertyValueToStringForLevel(level: number, value: number): string {\n    //({ value });\n    if (level === 1) {\n      return `${value}px`;\n    }\n    if (level === 2) {\n      return `\"wdth\" ${value}`;\n    }\n    if (level === 3) {\n      return `\"wght\" ${value}`;\n    }\n    if (level === 4) {\n      return `${value}px`;\n    }\n    if (level === 5) {\n      // opacity\n      return `${value}%`;\n    }\n    if (level === 6) {\n      // box shadow\n      const boxShadowString = getComputedStyle(this.referenceEl).boxShadow;\n      console.log('Box Shadow String:', boxShadowString);\n      const splitString = boxShadowString.split(' ');\n      // Update the value at the position of the blur radius in the shadow (5rd value, index 4)\n      splitString[5] = `${value}px`;\n      const newBoxShadowString = splitString.join(' ');\n      return newBoxShadowString;\n    }\n\n    if (level === 7) {\n      // get reference box shadow value\n      const boxShadowString = getComputedStyle(this.referenceEl).boxShadow;\n      // 'rgba(0, 0px 0px 0.5) -14px 14px 10px 0px inset'\n      const splitString = boxShadowString.split(' ');\n\n      // split into components\n      const horizontalOffset = parseInt(splitString[4], 10);\n      const verticalOffset = parseInt(splitString[5], 10);\n      const distance = Math.sqrt(\n        horizontalOffset * horizontalOffset + verticalOffset * verticalOffset\n      );\n\n      const { offsetX, offsetY } = convertDegreeToBoxShadowOffset(value, distance);\n\n      // Update the value at the position of the vertical offset in the shadow (4th value, index 3)\n      splitString[4] = `${offsetX}px`;\n      splitString[5] = `${offsetY}px`;\n      const newBoxShadowString = splitString.join(' ');\n      return newBoxShadowString;\n    }\n    if (level === 8) {\n      // padding\n      return `${value}px`;\n    }\n    return '';\n  }\n}\n", "import { GOOD_PERCENT, PERFECT_PERCENT, POINTS_FOR_GOOD, POINTS_FOR_PERFECT } from './constants';\n\nexport class Score {\n  private currentScore = 0;\n\n  constructor(private scoreElement: HTMLElement) {\n    this.scoreElement.textContent = this.currentScore.toString(); // initialize the score display\n  }\n\n  updateScore(targetValue: number, userSelection: number, isCircular = false) {\n    const points = this.calculateScore(targetValue, userSelection, isCircular);\n    this.currentScore += points; // update score\n    this.scoreElement.textContent = this.currentScore.toString(); // update score display\n    return points;\n  }\n\n  calculateScore(targetValue: number, userSelection: number, isCircular = false) {\n    let difference;\n    let percentageDifference;\n\n    if (isCircular) {\n      difference = Math.abs(targetValue - userSelection);\n      // Adjust difference for angle wrap-around\n      difference = Math.min(difference, 360 - difference);\n\n      // calculate percentage\n      percentageDifference = (difference / 360) * 100;\n    } else {\n      difference = Math.abs(targetValue - userSelection);\n      percentageDifference = (difference / targetValue) * 100;\n    }\n\n    if (percentageDifference <= PERFECT_PERCENT) {\n      return POINTS_FOR_PERFECT;\n    }\n    if (percentageDifference <= GOOD_PERCENT) {\n      return POINTS_FOR_GOOD;\n    }\n    return 0;\n  }\n\n  reset() {\n    this.currentScore = 0; // reset score\n    this.scoreElement.textContent = this.currentScore.toString(); // reset score display\n  }\n\n  getScore() {\n    return this.currentScore; // get the current score\n  }\n}\n", "const { fetch } = window;\n\nimport { CLASSNAMES, LEVEL_PROPERTIES, PENALTY_DURATION, SHAKE_DURATION } from '$utils/constants';\nimport { formatHumanReadableTime } from '$utils/helpers';\nimport { Stopwatch } from '$utils/Stopwatch';\n\nimport { Level } from './utils/Level';\nimport { Score } from './utils/Score';\n\nenum SELECTORS {\n  REFERENCE_ELEMENTS = '[data-game=\"reference-el\"]', // element displaying target value\n  TARGET_ELEMENTS = '[data-game=\"target-el\"]', // element displaying user selection\n  DISPLAY_SELECT = '[data-game=\"display-user-selection\"]', // element displaying user selection\n  USER_SELECT_ELEMENTS = '[data-game=\"user-select-el\"]', // element user uses to select\n  MESSAGE_ELEMENT = '[data-game=\"message-el\"]', // element to display message\n  SUBMIT_BUTTONS = '[data-game=\"submit-button\"]', // button to submit answer\n  NEXT_ROUND_BUTTONS = '[data-game=\"next-button\"]', // button to go to next round\n  TAB_LINKS = '.w-tab-link', // tab links to control navigation\n  TIMER_ELEMENT = '[data-game=\"time-remaining\"]',\n  SCORE_ELEMENT = '[data-game=\"score\"]',\n  ROUND_ELEMENT = '[data-game=\"round-number\"]',\n  START_GAME_BUTTON = '[data-game=\"start-game\"]',\n  COUNTDOWN_ELEMENT = '[data-game=\"countdown\"]',\n  INTRO_ELEMENT = '[data-game=\"intro\"]',\n  GAME_ELEMENT = '[data-game=\"game\"]',\n  END_ELEMENT = '[data-game=\"end\"]',\n  END_TEXT_ELEMENT = '[data-game=\"end-text\"]',\n  TRY_AGAIN_BUTTON = '[data-game=\"try-again\"]',\n  GLOW_TOP_EMBED = '[data-game=\"glow-top-embed\"]',\n  PENALTY_OVERLAY = '[data-game=\"penalty-overlay\"]',\n  GAME_WINDOW = '[data-game=\"game-window\"]',\n  NAME_ELEMENT = '[data-game=\"name\"]',\n  EMAIL_ELEMENT = '[data-game=\"email\"]',\n  SOCIAL_CONTENT = '[fs-social-share=\"content\"]',\n}\n\n// GET ELEMENTS\nconst referenceEls = document.querySelectorAll<HTMLElement>(SELECTORS.REFERENCE_ELEMENTS);\nconst targetEls = document.querySelectorAll<HTMLElement>(SELECTORS.TARGET_ELEMENTS);\nconst displaySelectEls = document.querySelectorAll<HTMLElement>(SELECTORS.DISPLAY_SELECT);\nconst userSelectEls = document.querySelectorAll<HTMLInputElement>(SELECTORS.USER_SELECT_ELEMENTS);\nconst submitButtons = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.SUBMIT_BUTTONS);\nconst nextRoundButtons = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.NEXT_ROUND_BUTTONS);\nconst messageEl = document.querySelector<HTMLDivElement>(SELECTORS.MESSAGE_ELEMENT);\nconst tabLinks = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.TAB_LINKS);\nconst timerEl = document.querySelector<HTMLDivElement>(SELECTORS.TIMER_ELEMENT);\nconst scoreEl = document.querySelector<HTMLDivElement>(SELECTORS.SCORE_ELEMENT);\nconst roundEl = document.querySelector<HTMLDivElement>(SELECTORS.ROUND_ELEMENT);\nconst startGameButton = document.querySelector<HTMLAnchorElement>(SELECTORS.START_GAME_BUTTON);\nconst countdownEl = document.querySelector<HTMLDivElement>(SELECTORS.COUNTDOWN_ELEMENT);\nconst introEl = document.querySelector<HTMLDivElement>(SELECTORS.INTRO_ELEMENT);\nconst gameEl = document.querySelector<HTMLDivElement>(SELECTORS.GAME_ELEMENT);\nconst endEl = document.querySelector<HTMLDivElement>(SELECTORS.END_ELEMENT);\nconst endTextEl = document.querySelector<HTMLDivElement>(SELECTORS.END_TEXT_ELEMENT);\nconst tryAgainButton = document.querySelector<HTMLAnchorElement>(SELECTORS.TRY_AGAIN_BUTTON);\nconst glowTopEmbed = document.querySelector<HTMLDivElement>(SELECTORS.GLOW_TOP_EMBED);\nconst penaltyOverlay = document.querySelector<HTMLDivElement>(SELECTORS.PENALTY_OVERLAY);\nconst gameWindow = document.querySelector<HTMLDivElement>(SELECTORS.GAME_WINDOW);\nconst nameEl = document.querySelector<HTMLInputElement>(SELECTORS.NAME_ELEMENT);\nconst emailEl = document.querySelector<HTMLInputElement>(SELECTORS.EMAIL_ELEMENT);\nconst socialContentEl = document.querySelector(SELECTORS.SOCIAL_CONTENT);\n\nif (!nameEl || !emailEl) {\n  throw new Error('Error retrieving name or email elements.');\n}\n\n// LOG THEM JUST FOR DEBUGGING\n// console.log({\n//   referenceEls,\n//   targetEls,\n//   userSelectEls,\n//   submitButtons,\n//   messageEl,\n//   nextRoundButtons,\n//   displaySelectEls,\n//   tabLinks,\n//   timerEl,\n//   scoreEl,\n//   roundEl,\n//   startGameButton,\n// });\n\n// STATE VARIABLES\nlet currentLevel = 1;\n\n// CREATE LEVELS\nconst levels: Level[] = [];\n\nconst numLevels = Object.keys(LEVEL_PROPERTIES).length;\nif (\n  !scoreEl ||\n  !roundEl ||\n  !messageEl ||\n  !timerEl ||\n  !countdownEl ||\n  !introEl ||\n  !gameEl ||\n  !endEl ||\n  !endTextEl ||\n  !tryAgainButton ||\n  !startGameButton ||\n  !glowTopEmbed ||\n  !penaltyOverlay ||\n  !gameWindow\n) {\n  throw new Error('Error retrieving necessary game elements.');\n}\nconst score = new Score(scoreEl);\nconst stopwatch = new Stopwatch(0, timerEl);\nroundEl.textContent = currentLevel.toString().padStart(2, '0');\nhideNextShowSubmit();\n\nfunction createLevels() {\n  levels.length = 0; // This clears the existing array\n\n  for (let i = 1; i <= numLevels; i++) {\n    if (!messageEl || !timerEl) {\n      throw new Error('Message and timer elements are required');\n    }\n\n    const level = new Level(\n      i, // level number\n      getRandomInt(parseInt(userSelectEls[i - 1].min, 10), parseInt(userSelectEls[i - 1].max, 10)), // target value\n      parseInt(userSelectEls[i - 1].value, 10), // user selection\n      displaySelectEls[i - 1], // element displaying user selection\n      referenceEls[i - 1], // reference element\n      LEVEL_PROPERTIES[i].cssProperty, // target element property\n      LEVEL_PROPERTIES[i].min, // target element unit\n      LEVEL_PROPERTIES[i].max, // target element unit\n      targetEls[i - 1],\n      userSelectEls[i - 1],\n      messageEl,\n      score,\n      i === 7 ? true : false // level 7 score is based on degrees\n    );\n    levels.push(level);\n  }\n}\n\nfunction handleStartGameButtonClicked() {\n  if (!introEl || !gameEl || !countdownEl) {\n    throw new Error('Intro and game elements are required');\n  }\n  if (!countdownEl) {\n    throw new Error('Countdown element is required');\n  }\n  introEl.style.setProperty('display', 'none');\n  gameEl.style.setProperty('display', 'block');\n\n  createLevels();\n  // start playing first level\n  levels[currentLevel - 1].play();\n\n  const countdown = setInterval(() => {\n    const currentCountdown = parseInt(countdownEl.textContent || '3', 10);\n    if (currentCountdown === 1) {\n      clearInterval(countdown);\n      simulateClick(tabLinks[currentLevel]);\n      // start playing first level\n      stopwatch.start();\n      levels[currentLevel - 1].play();\n    } else {\n      countdownEl.textContent = (currentCountdown - 1).toString();\n    }\n  }, 1000);\n}\n\nfunction resetGame() {\n  if (!roundEl || !countdownEl || !score || !stopwatch) {\n    throw new Error('Error resetting the game');\n  }\n  countdownEl.textContent = '3';\n  stopwatch.reset();\n  currentLevel = 1;\n  simulateClick(tabLinks[0]);\n  roundEl.textContent = currentLevel.toString().padStart(2, '0');\n  createLevels();\n  // Show the submit button and hide the next round button\n  submitButtons.forEach((button) => {\n    button.style.setProperty('display', 'block');\n  });\n  nextRoundButtons.forEach((button) => {\n    button.style.setProperty('display', 'none');\n  });\n}\n\nfunction gameOver() {\n  stopwatch.stop();\n\n  if (!gameEl || !endEl || !endTextEl) {\n    throw new Error('Game and end elements are required');\n  }\n\n  const socialContentEl = document.querySelector('[data-game=\"social-content\"]');\n  const timeDisplay = formatHumanReadableTime(stopwatch.getTime());\n  const message = `I beat the Eyeballing Game in ${timeDisplay}! Can you beat my time? Give it a try!`;\n\n  endTextEl.textContent = `Congratulations! You finished the game in ${timeDisplay}.`;\n  if (socialContentEl) {\n    socialContentEl.setAttribute('fs-social-share', message);\n  }\n\n  gameEl.style.setProperty('display', 'none');\n  endEl.style.setProperty('display', 'block');\n  fetch('https://hooks.zapier.com/hooks/catch/14554026/3my5lpi/', {\n    method: 'POST',\n    body: JSON.stringify({\n      time: stopwatch.getAccurateTime(),\n      name: nameEl.value,\n      email: emailEl.value,\n    }),\n  })\n    .then((response) => response.json())\n    .then((data) => console.log('Success:', data))\n    .catch((error) => console.error('Error:', error));\n\n  stopwatch.reset(); // Reset the timer\n}\n\nfunction handleAnswer(isCorrect: boolean) {\n  if (!messageEl || !glowTopEmbed || !penaltyOverlay || !gameWindow) return;\n  if (isCorrect) {\n    glowTopEmbed.classList.add(CLASSNAMES.SUCCESS);\n    messageEl.classList.add(CLASSNAMES.SUCCESS);\n    messageEl.textContent = 'Congratulations! You nailed it';\n    hideSubmitShowNext();\n\n    setTimeout(() => {\n      glowTopEmbed.classList.remove(CLASSNAMES.SUCCESS); // Remove SUCCESS class after 0.5 seconds\n    }, 800);\n  } else {\n    // time penalty\n    let penaltyTime = (PENALTY_DURATION - 1) / 1000;\n    messageEl.textContent = `Incorrect! Try again in ${Math.round(penaltyTime)} ${\n      penaltyTime === 1 ? 'second' : 'seconds'\n    }.`;\n\n    penaltyOverlay.classList.add(CLASSNAMES.ACTIVE);\n    glowTopEmbed.classList.add(CLASSNAMES.ERROR);\n    messageEl.classList.add(CLASSNAMES.ERROR);\n    gameWindow.classList.add(CLASSNAMES.SHAKE);\n\n    setTimeout(() => {\n      gameWindow.classList.remove(CLASSNAMES.SHAKE);\n    }, SHAKE_DURATION);\n\n    // This interval will run every second to update the messageEl text content\n    const penaltyInterval = setInterval(() => {\n      messageEl.textContent = `Incorrect! Try again in ${Math.round(penaltyTime)} ${\n        penaltyTime === 1 ? 'second' : 'seconds'\n      }.`;\n      penaltyTime -= 1;\n    }, 1000);\n\n    setTimeout(() => {\n      clearInterval(penaltyInterval); // Clear the interval after PENALTY_DURATION\n      penaltyOverlay.classList.remove(CLASSNAMES.ACTIVE);\n      glowTopEmbed.classList.remove(CLASSNAMES.ERROR);\n      messageEl.classList.remove(CLASSNAMES.ERROR);\n    }, PENALTY_DURATION);\n  }\n}\n\n// EVENT LISTENERS\nstartGameButton.addEventListener('click', () => {\n  handleStartGameButtonClicked();\n});\n\ndocument.addEventListener('keydown', (event) => {\n  if (event.key === 'q') {\n    gameOver();\n  }\n});\n\nsubmitButtons.forEach((button) => {\n  button.addEventListener('click', handleSubmitButtonClicked);\n});\n\nnextRoundButtons.forEach((button) => {\n  button.addEventListener('click', handleNextRoundButtonClicked);\n});\n\ntryAgainButton.addEventListener('click', () => {\n  resetGame();\n  endEl.style.setProperty('display', 'none');\n  introEl.style.setProperty('display', 'block');\n});\n\n// HANDLERS\nfunction handleSubmitButtonClicked() {\n  if (!messageEl || !glowTopEmbed) return;\n  const isCorrect = levels[currentLevel - 1].checkAnswer();\n  handleAnswer(isCorrect);\n}\n\nfunction handleNextRoundButtonClicked() {\n  if (!roundEl) {\n    throw new Error('Round element is required');\n  }\n  if (!glowTopEmbed || !messageEl) return;\n  currentLevel += 1;\n\n  // ui updates\n  glowTopEmbed.classList.remove(CLASSNAMES.SUCCESS);\n  messageEl.classList.remove(CLASSNAMES.SUCCESS);\n\n  if (currentLevel <= levels.length) {\n    roundEl.textContent = currentLevel.toString().padStart(2, '0');\n    simulateClick(tabLinks[currentLevel]);\n    levels[currentLevel - 1].play();\n\n    setTimeout(() => {\n      hideNextShowSubmit();\n    }, 200);\n  } else {\n    // last level completed\n    gameOver();\n  }\n}\n\n// HELPERS\n// function hideSubmitShowNext() {\n//   submitButtons.forEach((button) => {\n//     button.style.setProperty('display', 'none');\n//   });\n//   nextRoundButtons.forEach((button) => {\n//     button.style.setProperty('display', 'block');\n//   });\n// }\n\nfunction hideSubmitShowNext() {\n  submitButtons.forEach((button) => {\n    button.style.setProperty('display', 'none');\n  });\n\n  setTimeout(() => {\n    handleNextRoundButtonClicked(); // Trigger the next round after 1 second\n  }, 1000);\n}\n\nfunction hideNextShowSubmit() {\n  submitButtons.forEach((button) => {\n    button.style.setProperty('display', 'block');\n  });\n  nextRoundButtons.forEach((button) => {\n    button.style.setProperty('display', 'none');\n  });\n}\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// need to simulate click to trigger tab change\n// using click() causes scroll issues in Safari\nfunction simulateClick(element: HTMLAnchorElement) {\n  const clickEvent = new MouseEvent('click', {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  element.dispatchEvent(clickEvent);\n}\n"],
  "mappings": "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",
  "names": ["messageEl", "score", "socialContentEl"]
}
