{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/Level.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export class Level {\n  targetValue: number;\n  userSelection: number;\n  displayUserSelectionElement: HTMLElement;\n  referenceEl: HTMLElement;\n  targetEl: HTMLElement;\n  targetElProperty: string;\n  userSelectEl: HTMLInputElement;\n  levelNumber: number;\n  messageEl: HTMLDivElement;\n\n  constructor(\n    levelNumber: number,\n    targetValue: number,\n    userSelection: number,\n    displayUserSelectionElement: HTMLElement,\n    referenceEl: HTMLElement,\n    targetElProperty: string,\n    targetEl: HTMLElement,\n    userSelectEl: HTMLInputElement,\n    messageEl: HTMLDivElement\n  ) {\n    this.levelNumber = levelNumber;\n    this.targetValue = targetValue;\n    this.userSelection = userSelection;\n    this.displayUserSelectionElement = displayUserSelectionElement;\n    this.referenceEl = referenceEl;\n    this.targetElProperty = targetElProperty;\n    this.targetEl = targetEl;\n    this.userSelectEl = userSelectEl;\n    this.messageEl = messageEl;\n  }\n\n  play(): void {\n    console.log(`level ${this.levelNumber} started`);\n\n    // update the reference element\n    console.log(`update reference ${this.targetElProperty} to ${this.targetValue}`);\n    this.referenceEl.style.setProperty(\n      this.targetElProperty,\n      this.formatPropertyValueToStringForLevel(this.levelNumber, this.targetValue)\n    );\n\n    this.userSelectEl.addEventListener('input', (e) => {\n      this.userSelection = parseInt((e.target as HTMLInputElement).value);\n      this.updateGameUI();\n      console.log(`user selected: ${this.userSelection}`);\n    });\n  }\n\n  updateGameUI(): void {\n    // update the element that displays user selection\n    this.displayUserSelectionElement.textContent = `${this.userSelection}`;\n\n    this.targetEl.style.setProperty(\n      this.targetElProperty,\n      this.formatPropertyValueToStringForLevel(this.levelNumber, this.userSelection)\n    );\n\n    console.log(`update target ${this.targetElProperty} to ${this.userSelection}`);\n  }\n\n  checkAnswer(): boolean {\n    //console.log(`user selected: ${this.userSelection} and target is: ${this.targetValue}`);\n    this.messageEl.textContent = `user selected: ${this.userSelection} and target is: ${this.targetValue}`;\n    return this.targetValue === this.userSelection;\n  }\n\n  formatPropertyValueToStringForLevel(level: number, value: number): string {\n    if (level === 1) {\n      return `${value}px`;\n    } else if (level === 2) {\n      return `\"wdth\" ${value}`;\n    } else if (level === 3) {\n      return `\"wght\" ${value}`;\n    } else if (level === 4) {\n      return `${value}px`;\n    } else if (level === 5) {\n      // opacity\n      return `${value}%`;\n    } else if (level === 6) {\n      // box shadow\n      let boxShadowString = getComputedStyle(this.referenceEl).boxShadow;\n      let splitString = boxShadowString.split(' ');\n      // Update the value at the position of the vertical offset in the shadow (4th value, index 3)\n      splitString[4] = `${value}px`;\n      let newBoxShadowString = splitString.join(' ');\n      console.log({ newBoxShadowString });\n      return newBoxShadowString;\n    }\n    return '';\n  }\n}\n", "import { selectInputElement } from '@finsweet/ts-utils';\nimport { Level } from './utils/Level';\n\nenum SELECTORS {\n  REFERENCE_ELEMENTS = '[data-game=\"reference-el\"]', // element displaying target value\n  TARGET_ELEMENTS = '[data-game=\"target-el\"]', // element displaying user selection\n  DISPLAY_SELECT = '[data-game=\"display-user-selection\"]', // element displaying user selection\n  USER_SELECT_ELEMENTS = '[data-game=\"user-select-el\"]', // element user uses to select\n  MESSAGE_ELEMENT = '[data-game=\"message-el\"]', // element to display message\n  SUBMIT_BUTTONS = '[data-game=\"submit-button\"]', // button to submit answer\n  NEXT_ROUND_BUTTONS = '[data-game=\"next-button\"]', // button to go to next round\n  TAB_LINKS = '.w-tab-link', // tab links to control navigation\n}\n\n// GET ELEMENTS\nconst referenceEls = document.querySelectorAll<HTMLElement>(SELECTORS.REFERENCE_ELEMENTS);\nconst targetEls = document.querySelectorAll<HTMLElement>(SELECTORS.TARGET_ELEMENTS);\nconst displaySelectEls = document.querySelectorAll<HTMLElement>(SELECTORS.DISPLAY_SELECT);\nconst userSelectEls = document.querySelectorAll<HTMLInputElement>(SELECTORS.USER_SELECT_ELEMENTS);\nconst submitButtons = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.SUBMIT_BUTTONS);\nconst nextRoundButtons = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.NEXT_ROUND_BUTTONS);\nconst messageEl = document.querySelector<HTMLDivElement>(SELECTORS.MESSAGE_ELEMENT);\nconst tabLinks = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.TAB_LINKS);\n\n// LOG THEM JUST FOR DEBUGGING\nconsole.log({\n  referenceEls,\n  targetEls,\n  userSelectEls,\n  submitButtons,\n  messageEl,\n  nextRoundButtons,\n  displaySelectEls,\n  tabLinks,\n});\n\n// STATE VARIABLES\nlet currentLevel = 1;\n\n// CREATE LEVELS\nconst levels: Level[] = [];\n\nlet LEVEL_PROPERTIES_NAMES: Record<number, string> = {\n  1: '-webkit-text-stroke-width',\n  2: 'font-variation-settings',\n  3: 'font-variation-settings',\n  4: 'border-radius',\n  5: 'opacity',\n  6: 'box-shadow',\n};\n\nfor (let i = 0; i < 6; i++) {\n  let level = new Level(\n    i + 1, // level number\n    getRandomInt(parseInt(userSelectEls[i].min, 10), parseInt(userSelectEls[i].max)), // target value 1-10\n    parseInt(userSelectEls[i].value, 10), // user selection\n    displaySelectEls[i], // element displaying user selection\n    referenceEls[i], // reference element\n    LEVEL_PROPERTIES_NAMES[i + 1], // target element property\n    targetEls[i],\n    userSelectEls[i],\n    messageEl!\n  );\n  levels.push(level);\n}\n\n/*\n// variable font weight game\nlet levelOne = new Level(\n  1, // level number\n  getRandomInt(parseInt(userSelectEls[0].min, 10), parseInt(userSelectEls[0].max)), // target value 1-10\n  parseInt(userSelectEls[0].value, 10), // user selection\n  displaySelectEls[0], // element displaying user selection\n  referenceEls[0], // reference element\n  LEVEL_PROPERTIES_NAMES[i], // target element property\n  targetEls[0],\n  userSelectEls[0],\n  messageEl!\n);\n\n// variable font width game\nlet levelTwo = new Level(\n  2, // level number\n  getRandomInt(parseInt(userSelectEls[1].min, 10), parseInt(userSelectEls[1].max)),\n  parseInt(userSelectEls[1].value, 10), // user selection\n  displaySelectEls[1], // element displaying user selection\n  referenceEls[1], // reference element\n  'font-variation-settings', // target element property\n  targetEls[1],\n  userSelectEls[1],\n  messageEl!\n);\n\n// variable font weight game\nlet levelThree = new Level(\n  3, // level number\n  getRandomInt(parseInt(userSelectEls[2].min, 10), parseInt(userSelectEls[2].max)),\n  parseInt(userSelectEls[2].value, 20), // user selection\n  displaySelectEls[2], // element displaying user selection\n  referenceEls[2], // reference element\n  'font-variation-settings', // target element property\n  targetEls[2],\n  userSelectEls[2],\n  messageEl!\n);\n\n\n// button border radius\nconst levelNumber = 4;\nlet levelFour = new Level(\n  levelNumber, // level number\n  getRandomInt(\n    parseInt(userSelectEls[levelNumber - 1].min, 10),\n    parseInt(userSelectEls[levelNumber - 1].max)\n  ),\n  parseInt(userSelectEls[levelNumber - 1].value, 10), // user selection\n  displaySelectEls[levelNumber - 1], // element displaying user selection\n  referenceEls[levelNumber - 1], // reference element\n  'border-radius', // target element property\n  targetEls[levelNumber - 1],\n  userSelectEls[levelNumber - 1],\n  messageEl!\n);\n\n// add levels to levels array\nlevels.push(levelOne);\nlevels.push(levelTwo);\nlevels.push(levelThree);\n*/\n\n// start playing first level\nlevels[currentLevel - 1].play();\n\n// EVENT LISTENERS\nsubmitButtons.forEach((button) => {\n  button.addEventListener('click', handleSubmitButtonClicked);\n});\n\nnextRoundButtons.forEach((button) => {\n  button.addEventListener('click', handleNextRoundButtonClicked);\n});\n\n// HANDLERS\nfunction handleSubmitButtonClicked() {\n  levels[currentLevel - 1].checkAnswer();\n  hideSubmitShowNext();\n}\n\nfunction handleNextRoundButtonClicked() {\n  currentLevel++;\n  simulateClick(tabLinks[currentLevel - 1]);\n  levels[currentLevel - 1].play();\n  hideNextShowSubmit();\n}\n\n// HELPERS\nfunction hideSubmitShowNext() {\n  submitButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'hidden');\n  });\n  nextRoundButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'visible');\n  });\n}\n\nfunction hideNextShowSubmit() {\n  submitButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'visible');\n  });\n  nextRoundButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'hidden');\n  });\n}\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// need to simulate click to trigger tab change\n// using click() causes scroll issues in Safari\nfunction simulateClick(element: HTMLAnchorElement) {\n  let clickEvent = new MouseEvent('click', {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  element.dispatchEvent(clickEvent);\n}\n"],
  "mappings": "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",
  "names": ["messageEl"]
}
