{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/constants.ts", "../src/utils/helpers.ts", "../src/utils/Level.ts", "../src/utils/Score.ts", "../src/utils/Timer.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const TIME = 30;\n\nexport const LEVEL_PROPERTIES_NAMES: Record<number, string> = {\n  1: '-webkit-text-stroke-width',\n  2: 'font-variation-settings',\n  3: 'font-variation-settings',\n  4: 'border-radius',\n  5: 'opacity',\n  6: 'box-shadow',\n  7: 'box-shadow',\n};\n\nexport const PERFECT_PERCENT = 10;\nexport const GOOD_PERCENT = 20;\n\nexport const POINTS_FOR_PERFECT = 2;\nexport const POINTS_FOR_GOOD = 1;\n", "export function convertDegreeToBoxShadowOffset(angleInDegree: number, distance: number) {\n  angleInDegree -= 90;\n\n  // Ensure angleInDegree is within 0-360 degree range\n  if (angleInDegree < 0) {\n    angleInDegree += 360;\n  }\n  // Convert angle from degrees to radians\n  const angleInRadians = angleInDegree * (Math.PI / 180);\n\n  // Calculate x and y offsets\n  const offsetX = Math.floor(distance * Math.cos(angleInRadians));\n  const offsetY = Math.floor(distance * Math.sin(angleInRadians)); // Negate y offset to match CSS conventions\n\n  return { offsetX, offsetY };\n}\n", "import { convertDegreeToBoxShadowOffset } from './helpers';\nimport { Score } from './Score';\nimport { Timer } from './Timer';\n\nexport class Level {\n  targetValue: number;\n  userSelection: number;\n  displayUserSelectionElement: HTMLElement;\n  referenceEl: HTMLElement;\n  targetEl: HTMLElement;\n  targetElProperty: string;\n  userSelectEl: HTMLInputElement;\n  levelNumber: number;\n  messageEl: HTMLDivElement;\n  timer: Timer;\n  score: Score;\n  isCircular: boolean;\n\n  constructor(\n    levelNumber: number,\n    targetValue: number,\n    userSelection: number,\n    displayUserSelectionElement: HTMLElement,\n    referenceEl: HTMLElement,\n    targetElProperty: string,\n    targetEl: HTMLElement,\n    userSelectEl: HTMLInputElement,\n    messageEl: HTMLDivElement,\n    timer: Timer,\n    score: Score,\n    isCircular = false\n  ) {\n    this.levelNumber = levelNumber;\n    this.targetValue = targetValue;\n    this.userSelection = userSelection;\n    this.displayUserSelectionElement = displayUserSelectionElement;\n    this.referenceEl = referenceEl;\n    this.targetElProperty = targetElProperty;\n    this.targetEl = targetEl;\n    this.userSelectEl = userSelectEl;\n    this.messageEl = messageEl;\n    this.timer = timer;\n    this.score = score;\n    this.isCircular = isCircular;\n  }\n\n  play(): void {\n    // console.log(`level ${this.levelNumber} started`);\n\n    // update the reference element\n    // console.log(`update reference ${this.targetElProperty} to ${this.targetValue}`);\n    this.referenceEl.style.setProperty(\n      this.targetElProperty,\n      this.formatPropertyValueToStringForLevel(this.levelNumber, this.targetValue)\n    );\n\n    this.userSelectEl.addEventListener('input', (e) => {\n      this.userSelection = parseInt((e.target as HTMLInputElement).value);\n      this.updateGameUI();\n      //console.log(`user selected: ${this.userSelection}`);\n    });\n  }\n\n  updateGameUI(): void {\n    // update the element that displays user selection\n    this.displayUserSelectionElement.textContent = `${this.userSelection}`;\n\n    this.targetEl.style.setProperty(\n      this.targetElProperty,\n      this.formatPropertyValueToStringForLevel(this.levelNumber, this.userSelection)\n    );\n\n    //(`update target ${this.targetElProperty} to ${this.userSelection}`);\n  }\n\n  checkAnswer(): boolean {\n    const points = this.score.updateScore(\n      this.targetValue,\n      this.userSelection,\n      this.levelNumber === 7\n    );\n\n    //console.log(`user selected: ${this.userSelection} and target is: ${this.targetValue}`);\n    this.messageEl.textContent = `user selected: ${this.userSelection} and target is: ${this.targetValue}! +${points} points`;\n    return this.targetValue === this.userSelection;\n  }\n\n  formatPropertyValueToStringForLevel(level: number, value: number): string {\n    //({ value });\n    if (level === 1) {\n      return `${value}px`;\n    }\n    if (level === 2) {\n      return `\"wdth\" ${value}`;\n    }\n    if (level === 3) {\n      return `\"wght\" ${value}`;\n    }\n    if (level === 4) {\n      return `${value}px`;\n    }\n    if (level === 5) {\n      // opacity\n      return `${value}%`;\n    }\n    if (level === 6) {\n      // box shadow\n      const boxShadowString = getComputedStyle(this.referenceEl).boxShadow;\n      const splitString = boxShadowString.split(' ');\n      // Update the value at the position of the vertical offset in the shadow (4th value, index 3)\n      splitString[4] = `${value}px`;\n      const newBoxShadowString = splitString.join(' ');\n      return newBoxShadowString;\n    }\n    if (level === 7) {\n      // get reference box shadow value\n      const boxShadowString = getComputedStyle(this.referenceEl).boxShadow;\n      // 'rgba(0, 0px 0px 0.5) -14px 14px 10px 0px inset'\n      const splitString = boxShadowString.split(' ');\n\n      // split into components\n      const horizontalOffset = parseInt(splitString[4], 10);\n      const verticalOffset = parseInt(splitString[5], 10);\n      const distance = Math.sqrt(\n        horizontalOffset * horizontalOffset + verticalOffset * verticalOffset\n      );\n\n      const { offsetX, offsetY } = convertDegreeToBoxShadowOffset(value, distance);\n\n      // Update the value at the position of the vertical offset in the shadow (4th value, index 3)\n      splitString[4] = `${offsetX}px`;\n      splitString[5] = `${offsetY}px`;\n      const newBoxShadowString = splitString.join(' ');\n      return newBoxShadowString;\n    }\n    return '';\n  }\n}\n", "import { GOOD_PERCENT, PERFECT_PERCENT, POINTS_FOR_GOOD, POINTS_FOR_PERFECT } from './constants';\n\nexport class Score {\n  private currentScore = 0;\n\n  constructor(private scoreElement: HTMLElement) {\n    this.scoreElement.textContent = this.currentScore.toString(); // initialize the score display\n  }\n\n  updateScore(targetValue: number, userSelection: number, isCircular = false) {\n    const points = this.calculateScore(targetValue, userSelection, isCircular);\n    this.currentScore += points; // update score\n    this.scoreElement.textContent = this.currentScore.toString(); // update score display\n    return points;\n  }\n\n  calculateScore(targetValue: number, userSelection: number, isCircular = false) {\n    let difference;\n    let percentageDifference;\n\n    if (isCircular) {\n      difference = Math.abs(targetValue - userSelection);\n      // Adjust difference for angle wrap-around\n      difference = Math.min(difference, 360 - difference);\n\n      // calculate percentage\n      percentageDifference = (difference / 360) * 100;\n    } else {\n      difference = Math.abs(targetValue - userSelection);\n      percentageDifference = (difference / targetValue) * 100;\n    }\n\n    if (percentageDifference <= PERFECT_PERCENT) {\n      return POINTS_FOR_PERFECT;\n    }\n    if (percentageDifference <= GOOD_PERCENT) {\n      return POINTS_FOR_GOOD;\n    }\n    return 0;\n  }\n\n  reset() {\n    this.currentScore = 0; // reset score\n    this.scoreElement.textContent = this.currentScore.toString(); // reset score display\n  }\n\n  getScore() {\n    return this.currentScore; // get the current score\n  }\n}\n", "export class Timer {\n  private countdown = 0; // holds the setInterval\n  private timeRemaining: number; // holds the current remaining time\n  private eventCallbacks: { [key: string]: Array<() => void> } = {}; // <-- Define an event callbacks object\n\n  constructor(private timeLimit: number, private timeElement: HTMLElement) {\n    this.timeRemaining = this.timeLimit;\n    this.timeElement.textContent = this.formatTime(this.timeRemaining); // update timer display\n  }\n\n  on(eventName: string, callback: () => void) {\n    // <-- Provide method to register callbacks\n    if (!this.eventCallbacks[eventName]) {\n      this.eventCallbacks[eventName] = [];\n    }\n    this.eventCallbacks[eventName].push(callback);\n  }\n\n  private emit(eventName: string) {\n    // <-- Call all registered callbacks when the event happens\n    if (this.eventCallbacks[eventName]) {\n      this.eventCallbacks[eventName].forEach((callback) => callback());\n    }\n  }\n\n  start() {\n    this.countdown = setInterval(() => {\n      // console.log(`timeRemaining: ${this.timeRemaining}`);\n      this.timeRemaining -= 1;\n      if (this.timeRemaining < 0) {\n        this.stop();\n        this.emit('timeUp');\n      } else {\n        this.timeElement.textContent = this.formatTime(this.timeRemaining); // update timer display\n      }\n    }, 1000); // countdown every second\n  }\n\n  stop() {\n    clearInterval(this.countdown); // stop the countdown\n  }\n\n  reset() {\n    this.stop();\n    this.timeRemaining = this.timeLimit; // reset time remaining to the initial time limit\n    this.timeElement.textContent = this.formatTime(this.timeRemaining); // update timer display\n  }\n\n  getTime() {\n    return this.timeRemaining; // get the remaining time\n  }\n\n  private formatTime(time: number): string {\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`; // format time to MM:SS\n  }\n}\n", "import { LEVEL_PROPERTIES_NAMES, TIME } from '$utils/constants';\n\nimport { Level } from './utils/Level';\nimport { Score } from './utils/Score';\nimport { Timer } from './utils/Timer';\n\nenum SELECTORS {\n  REFERENCE_ELEMENTS = '[data-game=\"reference-el\"]', // element displaying target value\n  TARGET_ELEMENTS = '[data-game=\"target-el\"]', // element displaying user selection\n  DISPLAY_SELECT = '[data-game=\"display-user-selection\"]', // element displaying user selection\n  USER_SELECT_ELEMENTS = '[data-game=\"user-select-el\"]', // element user uses to select\n  MESSAGE_ELEMENT = '[data-game=\"message-el\"]', // element to display message\n  SUBMIT_BUTTONS = '[data-game=\"submit-button\"]', // button to submit answer\n  NEXT_ROUND_BUTTONS = '[data-game=\"next-button\"]', // button to go to next round\n  TAB_LINKS = '.w-tab-link', // tab links to control navigation\n  TIMER_ELEMENT = '[data-game=\"time-remaining\"]',\n  SCORE_ELEMENT = '[data-game=\"score\"]',\n  ROUND_ELEMENT = '[data-game=\"round-number\"]',\n  START_GAME_BUTTON = '[data-game=\"start-game\"]',\n  COUNTDOWN_ELEMENT = '[data-game=\"countdown\"]',\n  INTRO_ELEMENT = '[data-game=\"intro\"]',\n  GAME_ELEMENT = '[data-game=\"game\"]',\n  END_ELEMENT = '[data-game=\"end\"]',\n  END_TEXT_ELEMENT = '[data-game=\"end-text\"]',\n  TRY_AGAIN_BUTTON = '[data-game=\"try-again\"]',\n}\n\n// GET ELEMENTS\nconst referenceEls = document.querySelectorAll<HTMLElement>(SELECTORS.REFERENCE_ELEMENTS);\nconst targetEls = document.querySelectorAll<HTMLElement>(SELECTORS.TARGET_ELEMENTS);\nconst displaySelectEls = document.querySelectorAll<HTMLElement>(SELECTORS.DISPLAY_SELECT);\nconst userSelectEls = document.querySelectorAll<HTMLInputElement>(SELECTORS.USER_SELECT_ELEMENTS);\nconst submitButtons = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.SUBMIT_BUTTONS);\nconst nextRoundButtons = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.NEXT_ROUND_BUTTONS);\nconst messageEl = document.querySelector<HTMLDivElement>(SELECTORS.MESSAGE_ELEMENT);\nconst tabLinks = document.querySelectorAll<HTMLAnchorElement>(SELECTORS.TAB_LINKS);\nconst timerEl = document.querySelector<HTMLDivElement>(SELECTORS.TIMER_ELEMENT);\nconst scoreEl = document.querySelector<HTMLDivElement>(SELECTORS.SCORE_ELEMENT);\nconst roundEl = document.querySelector<HTMLDivElement>(SELECTORS.ROUND_ELEMENT);\nconst startGameButton = document.querySelector<HTMLAnchorElement>(SELECTORS.START_GAME_BUTTON);\nconst countdownEl = document.querySelector<HTMLDivElement>(SELECTORS.COUNTDOWN_ELEMENT);\nconst introEl = document.querySelector<HTMLDivElement>(SELECTORS.INTRO_ELEMENT);\nconst gameEl = document.querySelector<HTMLDivElement>(SELECTORS.GAME_ELEMENT);\nconst endEl = document.querySelector<HTMLDivElement>(SELECTORS.END_ELEMENT);\nconst endTextEl = document.querySelector<HTMLDivElement>(SELECTORS.END_TEXT_ELEMENT);\nconst tryAgainButton = document.querySelector<HTMLAnchorElement>(SELECTORS.TRY_AGAIN_BUTTON);\n\n// LOG THEM JUST FOR DEBUGGING\n// console.log({\n//   referenceEls,\n//   targetEls,\n//   userSelectEls,\n//   submitButtons,\n//   messageEl,\n//   nextRoundButtons,\n//   displaySelectEls,\n//   tabLinks,\n//   timerEl,\n//   scoreEl,\n//   roundEl,\n//   startGameButton,\n// });\n\n// STATE VARIABLES\nlet currentLevel = 1;\n\n// CREATE LEVELS\nconst levels: Level[] = [];\n\nconst numLevels = Object.keys(LEVEL_PROPERTIES_NAMES).length;\nif (\n  !scoreEl ||\n  !roundEl ||\n  !messageEl ||\n  !timerEl ||\n  !countdownEl ||\n  !introEl ||\n  !gameEl ||\n  !endEl ||\n  !endTextEl ||\n  !tryAgainButton ||\n  !startGameButton\n) {\n  throw new Error('Error retrieving necessary game elements.');\n}\nconst score = new Score(scoreEl);\nconst timer = new Timer(TIME, timerEl);\ntimer.on('timeUp', gameOver);\nroundEl.textContent = currentLevel.toString().padStart(2, '0');\nhideNextShowSubmit();\n\nfor (let i = 1; i <= numLevels; i++) {\n  if (!messageEl || !timerEl) {\n    throw new Error('Message and timer elements are required');\n  }\n\n  const level = new Level(\n    i, // level number\n    getRandomInt(parseInt(userSelectEls[i - 1].min, 10), parseInt(userSelectEls[i - 1].max, 10)), // target value\n    parseInt(userSelectEls[i - 1].value, 10), // user selection\n    displaySelectEls[i - 1], // element displaying user selection\n    referenceEls[i - 1], // reference element\n    LEVEL_PROPERTIES_NAMES[i], // target element property\n    targetEls[i - 1],\n    userSelectEls[i - 1],\n    messageEl,\n    timer,\n    score,\n    i === 7 ? true : false // level 7 score is based ond degrees\n  );\n  levels.push(level);\n}\n\nfunction handleStartGameButtonClicked() {\n  if (!introEl || !gameEl || !countdownEl) {\n    throw new Error('Intro and game elements are required');\n  }\n  if (!countdownEl) {\n    throw new Error('Countdown element is required');\n  }\n  introEl.style.setProperty('display', 'none');\n  gameEl.style.setProperty('display', 'block');\n\n  const countdown = setInterval(() => {\n    const currentCountdown = parseInt(countdownEl.textContent || '3', 10);\n    if (currentCountdown === 1) {\n      clearInterval(countdown);\n      simulateClick(tabLinks[currentLevel]);\n      // start playing first level\n      timer.start();\n      levels[currentLevel - 1].play();\n    } else {\n      countdownEl.textContent = (currentCountdown - 1).toString();\n    }\n  }, 1000);\n}\n\nfunction resetGame() {\n  if (!roundEl || !countdownEl || !score || !timer) {\n    throw new Error('Error resetting the game');\n  }\n  countdownEl.textContent = '3';\n  score.reset();\n  timer.reset();\n  currentLevel = 1;\n  simulateClick(tabLinks[0]);\n  roundEl.textContent = currentLevel.toString().padStart(2, '0');\n}\n\nfunction gameOver() {\n  timer.stop();\n  if (!gameEl || !endEl || !endTextEl) {\n    throw new Error('Game and end elements are required');\n  }\n  const timeRemaining = timer.getTime();\n  if (timeRemaining > 0) {\n    // finished before time ran out\n    // score.addScore(timeRemaining); // interesting\n    endTextEl.textContent = `Congratulations! You score ${score.getScore()} points, with ${timeRemaining} seconds remaining.`;\n  } else {\n    // time ran out\n    endTextEl.textContent = `Oh No! You ran out of time. You scored ${score.getScore()} points.`;\n  }\n  gameEl.style.setProperty('display', 'none');\n  endEl.style.setProperty('display', 'block');\n}\n\n// EVENT LISTENERS\nstartGameButton.addEventListener('click', () => {\n  handleStartGameButtonClicked();\n});\n\nsubmitButtons.forEach((button) => {\n  button.addEventListener('click', handleSubmitButtonClicked);\n});\n\nnextRoundButtons.forEach((button) => {\n  button.addEventListener('click', handleNextRoundButtonClicked);\n});\n\ntryAgainButton.addEventListener('click', () => {\n  resetGame();\n  endEl.style.setProperty('display', 'none');\n  introEl.style.setProperty('display', 'block');\n});\n\n// HANDLERS\nfunction handleSubmitButtonClicked() {\n  levels[currentLevel - 1].checkAnswer();\n  hideSubmitShowNext();\n}\n\nfunction handleNextRoundButtonClicked() {\n  if (!roundEl) {\n    throw new Error('Round element is required');\n  }\n  currentLevel += 1;\n  if (currentLevel <= levels.length) {\n    roundEl.textContent = currentLevel.toString().padStart(2, '0');\n    simulateClick(tabLinks[currentLevel]);\n    levels[currentLevel - 1].play();\n    hideNextShowSubmit();\n  } else {\n    // last level completed\n    gameOver();\n  }\n}\n\n// HELPERS\nfunction hideSubmitShowNext() {\n  submitButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'hidden');\n  });\n  nextRoundButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'visible');\n  });\n}\n\nfunction hideNextShowSubmit() {\n  submitButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'visible');\n  });\n  nextRoundButtons.forEach((button) => {\n    button.style.setProperty('visibility', 'hidden');\n  });\n}\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// need to simulate click to trigger tab change\n// using click() causes scroll issues in Safari\nfunction simulateClick(element: HTMLAnchorElement) {\n  const clickEvent = new MouseEvent('click', {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  element.dispatchEvent(clickEvent);\n}\n"],
  "mappings": "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",
  "names": ["messageEl", "timer", "score"]
}
